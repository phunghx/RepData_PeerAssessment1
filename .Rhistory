for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
#control list
myControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
#run model in parallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
data(iris)
model1 <- train(Species~., iris, method='rf', trControl=myControl)
model2 <- train(Species~., iris, method='rf', trControl=myControl)
stopCluster(cl)
all.equal(predict(model1, type='prob'), predict(model2, type='prob'))
model2 <- train(Species~., iris, method='rf', trControl=myControl)
setwd('d:/DataAnalysis_Company/Project3_Higgs')
higg <- read.table(file="training.csv",header=TRUE, sep=",", na.strings="-999.0")
higg <- higg[,-c(1,32)]
index = c()
for (i in 1:30)
{
if(sum(is.na(higg[,i])) == 0)
index <- c(index, i)
}
sum(is.na(higg$PRI_jet_num))
higg.NON.NA <- higg[,c(index, 31)]
set.seed(23687)
inTrain <- createDataPartition(y=higg.NON.NA$Label, p=0.75,list=FALSE)
training <- higg.NON.NA[inTrain,]
testing <- higg.NON.NA[-inTrain,]
library(doParallel)
library(caret)
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
myControl <- trainControl(method='cv', seeds=seeds, index=createFolds(training$Label))
cl <- makeCluster(detectCores())
registerDoParallel(cl)
model2 <- train(Label ~ ., training, method='rf', trControl=myControl)
stopCluster(cl)
?makeCluster
?makePSOCKcluster
makePSOCKcluster("192.168.1.108",user="phunghx",outfile="")
library(doSNOW)
registerDoSNOW
makePSOCKcluster(master ="192.168.1.108")
makePSOCKcluster(names ="192.168.1.108")
winOptions <-
list(host="192.168.1.108",
rscript="C:/Program Files/R/R-3.1.0/bin/Rscript.exe",
snowlib="C:/Users/phunghx/Documents/R/win-library/3.1")
cl <- makeCluster(rep(list(winOptions), 2)), type = "SOCK")
cl <- makeCluster(rep(list(winOptions), 2),type = "SOCK")
winOptions
rep(list(winOptions), 2)
cl <- makeCluster(rep(list(winOptions), 2),type = "SOCK")
cl <- makeCluster(detectCores())
stopCluster(cl)
cl <- makeCluster(detectCores(),type="SOCK")
stopCluster(cl)
winOptions <-
list(host="192.168.1.108",
rscript="C:/Program Files/R/R-3.1.0/bin/Rscript.exe",
snowlib="C:/Users/phunghx/Documents/R/win-library/3.1")
cl <- makeCluster(rep(list(winOptions), 2),type = "SOCK")
cl <- makeCluster(rep(list(winOptions), 2),type = "PSOCK")
makePSOCKcluster("phunghx", port=11234, manual=TRUE)
setwd('d:/DataAnalysis_Company/Project3_Higgs')
higg <- read.table(file="training.csv",header=TRUE, sep=",", na.strings="-999.0")
higg <- higg[,-c(1,32)]
index = c()
for (i in 1:30)
{
if(sum(is.na(higg[,i])) == 0)
index <- c(index, i)
}
library(doParallel)
library(caret)
higg.NON.NA <- higg[,c(index, 31)]
set.seed(23687)
inTrain <- createDataPartition(y=higg.NON.NA$Label, p=0.75,list=FALSE)
training <- higg.NON.NA[inTrain,]
testing <- higg.NON.NA[-inTrain,]
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
myControl <- trainControl(method='cv',index=createFolds(training$Label))
cl <- makeCluster(detectCores())
registerDoParallel(cl)
model2 <- train(Label ~ ., training, method='rf', trControl=myControl)
stopCluster(cl)
model2
data(iris)
library(doParallel)
library(caret)
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 3) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
iris
index=createFolds(training$Label)
setwd('d:/DataAnalysis_Company/Project3_Higgs')
higg <- read.table(file="training.csv",header=TRUE, sep=",", na.strings="-999.0")
higg <- higg[,-c(1,32)]
index = c()
for (i in 1:30)
{
if(sum(is.na(higg[,i])) == 0)
index <- c(index, i)
}
index=createFolds(training$Label)
higg.NON.NA <- higg[,c(index, 31)]
set.seed(23687)
inTrain <- createDataPartition(y=higg.NON.NA$Label, p=0.75,list=FALSE)
training <- higg.NON.NA[inTrain,]
testing <- higg.NON.NA[-inTrain,]
index=createFolds(training$Label)
set.seed(123)
seeds <- vector(mode = "list", length = 11)#length is = (n_repeats*nresampling)+1
for(i in 1:10) seeds[[i]]<- sample.int(n=1000, 17) #(3 is the number of tuning parameter, mtry for rf, here equal to ncol(iris)-2)
seeds[[11]]<-sample.int(1000, 1)#for the last model
seeds
library(doParallel)
library(caret)
names(getModelInfo())
setwd('d:/DataAnalysis_Company/Project3_Higgs')
higg <- read.csv(file="training.csv")
higg <- higg[,-c(1,32)]
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modelBayes <- train(Label ~ ., data = higg, method="bayesglm")
stopCluster(cl)
modelBayes
modelBayes$finalModel
pbeta(0.75,2,1)
?pbeta
library(manipulate)
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse <- mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("Imbalance= "), round(mse, 2))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
data(manipulate)
data(galton)
data(Galton)
install.packages("galton")
install.packages("mosaic")
data(galton)
data(Galton)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
myHist <- function(mu){
hist(galton$child, col="blue", breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse <- mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("Imbalance= "), round(mse, 2))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
manipulate(myHist(mu), mu = slider(62,74))
manipulate(plot(1:x), x = slider(5, 10))
manipulate(myHist(mu), mu = slider(62,74))
x <- 1:4
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
install.packages("knitr")
install.packages('ProjectTemplate')
devtools::install_github('johnmyleswhite/ProjectTemplate')
install.packages("devtools")
library(devtools)
devtools::install_github('johnmyleswhite/ProjectTemplate')
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y,x) * sd(y) / sd(x)
data(mtcars)
x <- mtcars$weight
y <- mtcars$mpg
cor(y,x) * sd(y) / sd(x)
x
y
x <- mtcars$weight
x
x <- mtcars$wt
x
cor(y,x) * sd(y) / sd(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- (x - mean(x))/ sd(x)
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
scop <- cor(x,y) * sd(y)/sd(x)
mean(y) - scop* mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
for v in x{
for (v in x){
v
}
for (v in x){
x - v
}
for (v in x){
t <- (x - v) * (x - v)
}
t
for (v in x){
t <- (x - v) * (x - v)
va <- sum(t)
}
for (v in x){
t <- (x - v) * (x - v)
va <- sum(t)
if(va < min)
min = va
}
min = 100
for (v in x){
t <- (x - v) * (x - v)
va <- sum(t)
if(va < min)
min = va
}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w)/(4 * sum(w))
sum(x * w)/(1 * sum(w))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(x,y) * sd(y)/sd(x)
sum(x*y)/(sum(x*x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
b1 <- cor(x,y) * sd(y)/ sd(x)
min = 100
for (v in x){
for (v2 in x){
t <- (v-v2)^2
if(t < min)
min <- t
}
}
min = 100
for (v in x){
for (v2 in x){
t <- (v-v2)^2
if(t < min & t !=0)
min <- t
}
}
min
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
plot(1:n, means, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size")
abline(h = 0)
(0.75*0.3)/(0.75*0.3 + (1-0.52)*0.7)
?qnorm
qnorm(0)
pnorm(0)
pnorm(-1)
pnorm(70, mean=80, sd= 10)
qnorm(0.5)
qnorm(0.1586553)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
pbinom
pbinom(4,size=5,prob=0.5)
?pbinom
qbinom(4,size=5,prob=0.5)
qbinom(4,size=5,prob=0.5,lower.tail=FALSE)
pbinom(4,size=5,prob=0.5,lower.tail=FALSE)
5*0.5^4+0.5^5
5*0.5^5+0.5^5
ppois(10,lambda=5*3)
sqrt(1/120)
sqrt(1/12)/10
?pnorm
pnorm(0)
pnorm(14,mean=15,sd=1)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)
0.8413447-0.1586553
library(UsingR); data(diamond)
plot(diamond$carat, diamond$price,
xlab="Mass (carat)",
ylab="Price (SIN $)",
bg="lightblue",
col="black", cex=1.1, pch=21, frame=FALSE)
abline(lm(price ~ carat, data= diamond), lwd=2)
fit <- lm(price ~ carat, data=diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat *10), data=diamond)
coef(fit3)
predict(fit, newdata = data.frame(carat=newx))
newx <- c(0.16,0.27,0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat=newx))
abline(v=0.16)
abline(h=335.7381)
data(diamond)
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e - (y-yhat)))
x <- runif(100,-3,3)
y <- x+ sin(x) + rmorm(100,sd=-2)
y <- x+ sin(x) + rnorm(100,sd=-2)
plot(x,y)
abline(lm(y~x))
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(e^2)/(n-2))
example(anscombe)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x);
summary(fit)$coefficients
n <- length(y)
sqrt(sum(resid(fit)^2) / (n - 2))
data(mtcars)
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("confidence"))
View(`p1`)
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("prediction"))
View(`p1`)
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("prediction"))
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm(y ~ x)
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
#Get confident interval with 95%
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
?mtcars
y(0)
y(1)
y[1]
y[0]
y[2]
max(y)
max(x)
min(x)
newdata <- data.frame(x=3)
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta1 <- beta1 * 2
e <- y - beta0 - beta1 * (x /2)
n = length(y)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
x <- x /2
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
x <- x /2
fit <- lm(y ~ x)
confint(fit)
summary(fit)$coefficients
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
sumCoef
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit9 <- lm( y ~ x)
fit9
beta0 <- fit9$coefficients[1]
beta1 <- fit9$coefficients[2]
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/l2
L1/L2
L2/L1
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/L2
L2 <- sum(((mean(y) + 0 * x)- y)^2)
L1/L2
setwd("D:\\Coursera\\EDA\\Reproducible Research\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
View(activity)
summary(activity)
head(activity)
str(activity$date)
a <- str(activity$date)
a <- factor(activity$date)
a
library(dplyr)
activity.NNA.step <- subset(activity, !is.na(steps))
summary(activity.NNA.step)
activity.group.date <- group_by((activity.NNA.step), date)
activity.NNA.step <- subset(activity, !is.na(steps))
activity.group.date <- group_by((activity.NNA.step), date)
activity.group.date.attr <- summarise(activity.group.date,
total_steps = sum(steps),
mean_steps = mean(steps),
median_steps = median(steps),
n=n())
head(activity.group.date.attr)
library(ggplot2)
ggplot(aes(x=date,y = total_steps), data= activity.group.date.attr) +
geom_bar(stat = "identity", width=.5, fill="darkgreen", colour="darkgreen") +
xlab("Day") +
ylab("The total number of steps") +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_bar(stat = "identity", width=.5, fill="darkgreen", colour="darkgreen") +
ylab("The total number of steps") +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram() +
ylab("The total number of steps") +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram(binwidth=10) +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram() +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram() +
ggtitle("The total number of steps taken each day")
subset(activity.NNA.step, steps==0)
a <- subset(activity.NNA.step, steps==0)
View(a)
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram(binwidth=100) +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram(binwidth=10) +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram(binwidth=1000) +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram() +
ggtitle("The total number of steps taken each day")
hist(activity.group.date.attr$total_steps)
countSteps <- aggregate(steps ~ date, activity.NNA.step, sum)
qplot(data=countSteps,x=steps)
activity.NNA.step <- subset(activity, !is.na(steps))
countSteps <- aggregate(steps ~ date, activity.NNA.step, sum)
ggplot(aes(steps), data= countSteps) +
geom_histogram() +
ggtitle("The total number of steps taken each day")
ggplot(aes(total_steps), data= activity.group.date.attr) +
geom_histogram() +
ggtitle("The total number of steps taken each day")
countSteps <- aggregate(steps ~ date, subset(activity, !is.na(steps), sum)
;
countSteps <- aggregate(steps ~ date, subset(activity, !is.na(steps)), sum)
qplot(data=countSteps,x=steps)
