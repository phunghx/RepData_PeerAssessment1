for (v2 in x){
t <- (v-v2)^2
if(t < min & t !=0)
min <- t
}
}
min
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
plot(1:n, means, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size")
abline(h = 0)
(0.75*0.3)/(0.75*0.3 + (1-0.52)*0.7)
?qnorm
qnorm(0)
pnorm(0)
pnorm(-1)
pnorm(70, mean=80, sd= 10)
qnorm(0.5)
qnorm(0.1586553)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
pbinom
pbinom(4,size=5,prob=0.5)
?pbinom
qbinom(4,size=5,prob=0.5)
qbinom(4,size=5,prob=0.5,lower.tail=FALSE)
pbinom(4,size=5,prob=0.5,lower.tail=FALSE)
5*0.5^4+0.5^5
5*0.5^5+0.5^5
ppois(10,lambda=5*3)
sqrt(1/120)
sqrt(1/12)/10
?pnorm
pnorm(0)
pnorm(14,mean=15,sd=1)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)
0.8413447-0.1586553
library(UsingR); data(diamond)
plot(diamond$carat, diamond$price,
xlab="Mass (carat)",
ylab="Price (SIN $)",
bg="lightblue",
col="black", cex=1.1, pch=21, frame=FALSE)
abline(lm(price ~ carat, data= diamond), lwd=2)
fit <- lm(price ~ carat, data=diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat *10), data=diamond)
coef(fit3)
predict(fit, newdata = data.frame(carat=newx))
newx <- c(0.16,0.27,0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat=newx))
abline(v=0.16)
abline(h=335.7381)
data(diamond)
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e - (y-yhat)))
x <- runif(100,-3,3)
y <- x+ sin(x) + rmorm(100,sd=-2)
y <- x+ sin(x) + rnorm(100,sd=-2)
plot(x,y)
abline(lm(y~x))
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(e^2)/(n-2))
example(anscombe)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x);
summary(fit)$coefficients
n <- length(y)
sqrt(sum(resid(fit)^2) / (n - 2))
data(mtcars)
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("confidence"))
View(`p1`)
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("prediction"))
View(`p1`)
p1 <- predict(fit2, data.frame(x=mean(x)), interval = ("prediction"))
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm(y ~ x)
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
#Get confident interval with 95%
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
?mtcars
y(0)
y(1)
y[1]
y[0]
y[2]
max(y)
max(x)
min(x)
newdata <- data.frame(x=3)
p1 <- predict(fit2, newdata , interval = ("prediction"))
p1
newdata <- data.frame(x=mean(x))
p1 <- predict(fit2, newdata , interval = ("confidence"))
p1
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta1 <- beta1 * 2
e <- y - beta0 - beta1 * (x /2)
n = length(y)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
x <- x /2
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
x <- x /2
fit <- lm(y ~ x)
confint(fit)
summary(fit)$coefficients
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit2 <- lm(y ~ x)
sumCoef <- summary(fit2)$coefficients
sumCoef
x <- mtcars$wt
y <- mtcars$mpg
n = length(y)
fit9 <- lm( y ~ x)
fit9
beta0 <- fit9$coefficients[1]
beta1 <- fit9$coefficients[2]
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/l2
L1/L2
L2/L1
L1 <- sum(((beta0 + beta1 * x)- y)^2)
L2 <- sum(((beta0 + 0 * x)- y)^2)
L1/L2
L2 <- sum(((mean(y) + 0 * x)- y)^2)
L1/L2
activity <- read.csv("activity.csv")
setwd("d:\Coursera\EDA\Reproducible Research\RepData_PeerAssessment1")
setwd("d:\\Coursera\\EDA\\Reproducible Research\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
summary(activity)
library(ggplot2)
countSteps <- aggregate(steps ~ date, subset(activity, !is.na(steps)), sum)
qplot(data=countSteps,x=steps)
meanStep <- mean(countSteps$steps)
medianStep <- median(countSteps$steps)
abline(v=meanStep)
qplot(data=countSteps,x=steps)
abline(v=meanStep)
plot(data=countSteps,x=steps)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = 10, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = meanStep, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = 10, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = 100, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = -100, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = -1000, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = -meanStep, colour = "red", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = -meanStep, colour = "red", size = 2) +
geom_abline(intercept = -medianStep, colour = "green", size = 2)
qplot(data=countSteps,x=steps) +
geom_abline(intercept = -meanStep, colour = "red", size = 1) +
geom_abline(intercept = -medianStep, colour = "green", size = 1)
print("mean: %d", meanStep)
print("mean: %f", meanStep)
meanStep <- mean(countSteps$steps)
medianStep <- median(countSteps$steps)
meanStep
medianStep
View(activity)
intervalMean <- aggregate(steps ~ interval,subset(activity, !is.na(steps)), sum)
View(intervalMean)
plot(x = intervalMean$interval, y=intervalMean$steps, type="l")
title("Interval")
title("The average number of steps taken")
plot(x = intervalMean$interval, y=intervalMean$steps, type="l")
title("The average number of steps taken")
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken")
intervalMean <- aggregate(steps ~ interval,subset(activity, !is.na(steps)), sum)
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken",
ylab="Average step")
intervalMean <- aggregate(steps ~ interval,subset(activity, !is.na(steps)), sum)
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken per day",
ylab="Average step")
maxStep <- max(intervalMean$steps)
intervalMax <- subset(intervalMean, steps== maxStep)$interval
abline(v=intervalMax)
text(x=intervalMax,y= -5,"Max")
text(x=intervalMax,y= -15,"Max")
text(x=intervalMax,y= -15,"Max")
text(x=intervalMax,y= -105,"Max")
text(x=intervalMax,y= -1005,"Max")
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken per day",
ylab="Average step")
abline(v=intervalMax)
text(x=intervalMax,y= 0,"Max")
text(x=intervalMax,y= 0,"Max="+str(intervalMax))
text(x=intervalMax,y= 0,"Max="+ (intervalMax))
"Max="+ (intervalMax)
text(x=intervalMax,y= 0,paste("Max= ", intervalMax))
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken per day",
ylab="Average step")
abline(v=intervalMax)
text(x=intervalMax,y= 0,paste("Max= ", intervalMax))
dim(subset(activity, is.na(steps)))[1]
summary(activity)
meanDayActivity <- aggregate(steps ~ date, activity, mean
)
View(meanDayActivity)
str(activity$date)
a = subset(activity, is.na(steps))
View(a)
a = subset(activity, !is.na(steps))
View(a)
intervalMean <- aggregate(steps ~ interval,subset(activity, !is.na(steps)), mean)
plot(x = intervalMean$interval, y=intervalMean$steps, type="l",xlab="Interval"
,main="The average number of steps taken per day",
ylab="Average step")
n <- dim(activity)[1]
for (i in 1:n)  {
}
activity[0]
activity[1]
activity[1,1]
activity[1,2]
activity[1,3]
activity[1,4]
activity[1,0]
activity[1,1]
is.na(activity[1,1])
subset(intervalMean,interval == activity[1,2])[1,1]
subset(intervalMean,interval == activity[1,3])[1,1]
subset(intervalMean,interval == activity[1,3])[1,2]
View(intervalMean)
n <- dim(activity)[1]
for (i in 1:n)  {
if (is.na(activity[i,1]))
activity[i,1] = subset(intervalMean,interval == activity[i,3])[1,2]
}
View(activity)
activity <- read.csv("activity.csv")
subset(intervalMean,interval == activity[1,3])[1,2]
summary(activity)
activityImputed <- activity
intervalMean <- aggregate(steps ~ interval,subset(activityImputed, !is.na(steps)), mean)
n <- dim(activityImputed)[1]
for (i in 1:n)  {
if (is.na(activity[i,1]))
activityImputed[i,1] <- subset(intervalMean,interval == activityImputed[i,3])[1,2]
}
summary(activityImputed)
countStepsNew <- aggregate(steps ~ date, activityImputed, sum)
qplot(data=countStepsNew,x=steps)
qplot(data=countSteps,x=steps)
meanStepNew <- mean(countStepsNew$steps)
medianStepNew <- median(countStepsNew$steps)
meanStepNew
medianStepNew
meanStep
medianStep
weekdays(activityImputed[1,2])
weekdays(as.Date(activityImputed[1,2]))
str(weekdays(as.Date(activityImputed[1,2])))
weekdays(as.Date(activityImputed[1,2]))
weekdays(as.Date(countStepsNew))
weekdays(as.Date(countStepsNew$date))
which(weekday == weekdays(as.Date(activityImputed[1,2])))
weekday <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekend <- c("Saturday","Sunday")
which(weekday == weekdays(as.Date(activityImputed[1,2])))
activityImputed$day <- NULL
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6)
activityImputed[i,4] <- "weekday"
else
activityImputed[i,4] <- "weekend"
}
activityImputed$day <- NULL
View(activityImputed)
tail(activityImputed)
activityImputed <- activity
intervalMean <- aggregate(steps ~ interval,subset(activityImputed, !is.na(steps)), mean)
n <- dim(activityImputed)[1]
for (i in 1:n)  {
if (is.na(activity[i,1]))
activityImputed[i,1] <- subset(intervalMean,interval == activityImputed[i,3])[1,2]
}
activityImputed$day <- NULL
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6)
activityImputed[i,4] = "weekday"
else
activityImputed[i,4] = "weekend"
}
summary(activityImputed$V4)
str(activityImputed$V4)
factor("weekday")
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6)
activityImputed[i,4] = factor("weekday")
else
activityImputed[i,4] = factor("weekend")
}
str(activityImputed$V4)
View(activityImputed)
summary(activityImputed)
activityImputed <- activity
intervalMean <- aggregate(steps ~ interval,subset(activityImputed, !is.na(steps)), mean)
n <- dim(activityImputed)[1]
for (i in 1:n)  {
if (is.na(activity[i,1]))
activityImputed[i,1] <- subset(intervalMean,interval == activityImputed[i,3])[1,2]
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6) {
activityImputed[i,4] = factor("weekday")
else
activityImputed[i,4] = factor("weekend")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6) {
activityImputed[i,4] = factor("weekday")
}
else {
activityImputed[i,4] = factor("weekend")
}
}
warnings()
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
else {
activityImputed[i,4] = ("weekend")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
day
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
print(activityImputed[i,2])
print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
print(weekdays(as.Date(activityImputed[i,2])))
print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
}
which(weekday==weekdays(a.Date('2014-7-19')))
which(weekday==weekdays(as.Date('2014-7-19')))
which(weekday==weekdays(as.Date('2014-7-19')))[0]
which(weekday==weekdays(as.Date('2014-7-18')))
which(weekday==weekdays(as.Date('2014-7-20')))
weekday
weekday <- c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
print(weekdays(as.Date(activityImputed[i,2])))
print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
else
activityImputed[i,4] = ("weekday")
}
which(weekday==weekdays(as.Date('2014-7-20')))
which(weekday==weekdays(as.Date('2014-7-19')))
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
#print(weekdays(as.Date(activityImputed[i,2])))
#print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
else
activityImputed[i,4] = ("weekday")
}
View(activityImputed)
activityImputed <- activity
intervalMean <- aggregate(steps ~ interval,subset(activityImputed, !is.na(steps)), mean)
n <- dim(activityImputed)[1]
for (i in 1:n)  {
if (is.na(activity[i,1]))
activityImputed[i,1] <- subset(intervalMean,interval == activityImputed[i,3])[1,2]
}
n <- dim(activityImputed)[1]
for (i in 1:n)  {
day <- which(weekday == weekdays(as.Date(activityImputed[i,2])))
#print(weekdays(as.Date(activityImputed[i,2])))
#print(day)
if (day <= 6) {
activityImputed[i,4] = ("weekday")
}
else{
activityImputed[i,4] = ("weekend")
}
}
transform(activityImputed, day = factor(V4))
activityImputed <-  transform(activityImputed, day = factor(V4))
weekday_group <- group_by(activityImputed, interval, day)
library(dplyr)
weekday_group <- group_by(activityImputed, interval, day)
View(weekday_group)
activity_weekday <- summarise(weekday_group,
mean_steps = mean(steps),
n=n())
View(activity_weekday)
qplot(data=activity_weekday ,y= mean_steps, x=interval) +
facet_wrap(~day, ncol=2)
qplot(data=activity_weekday ,y= mean_steps, x=interval) +
facet_wrap(~day, ncol=1, nrow=2)
qplot(data=activity_weekday ,y= mean_steps, x=interval,geom = "line") +
facet_wrap(~day, ncol=1, nrow=2)
qplot(data=activity_weekday ,y= mean_steps, x=interval,geom = "line",
main="The average number of steps taken at weekwend compared with weekday",
xlab="Interval",
ylab="The mean of steps") +
facet_wrap(~day, ncol=1, nrow=2)
